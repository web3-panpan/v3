"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.download = exports.writeLibrariesToFile = exports.mapMissingLibraryDependencies = exports.findMissingLibraries = exports.generateSolcJSExecutableCode = exports.isVersionInRange = exports.getVersionComponents = exports.pluralize = exports.getZksolcUrl = exports.saltFromUrl = exports.sha1 = exports.isURL = exports.zeroxlify = exports.updateCompilerConf = exports.filterSupportedOutputSelections = void 0;
const semver_1 = __importDefault(require("semver"));
const constants_1 = require("./constants");
const crypto_1 = __importDefault(require("crypto"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const proper_lockfile_1 = __importDefault(require("proper-lockfile"));
const errors_1 = require("./errors");
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const util_1 = __importDefault(require("util"));
const TEMP_FILE_PREFIX = "tmp-";
function filterSupportedOutputSelections(outputSelection, zkCompilerVersion) {
    const filteredOutputSelection = {};
    const versionComponents = getVersionComponents(zkCompilerVersion);
    let supportedOutputSelections;
    switch (true) {
        case versionComponents[0] <= 1 && versionComponents[1] <= 3 && versionComponents[2] <= 5:
            supportedOutputSelections = constants_1.ZKSOLC_COMPILERS_SELECTOR_MAP['1.3.5'];
            break;
        default:
            supportedOutputSelections = [...constants_1.ZKSOLC_COMPILERS_SELECTOR_MAP['1.3.5'], 'metadata', 'userdoc', 'devdoc'];
            break;
    }
    for (const [file, contractSelection] of Object.entries(outputSelection)) {
        filteredOutputSelection[file] = {};
        for (const [contract, outputs] of Object.entries(contractSelection)) {
            filteredOutputSelection[file][contract] = outputs.filter((output) => supportedOutputSelections.includes(output));
        }
    }
    return filteredOutputSelection;
}
exports.filterSupportedOutputSelections = filterSupportedOutputSelections;
function updateCompilerConf(compiler, zksolc) {
    const [major, minor] = getVersionComponents(compiler.version);
    if (major === 0 && minor < 8 && zksolc.settings.forceEvmla) {
        console.warn('zksolc solidity compiler versions < 0.8 work with forceEvmla enabled by default');
    }
    let settings = compiler.settings || {};
    // Override the default solc optimizer settings with zksolc optimizer settings.
    compiler.settings = Object.assign(Object.assign({}, settings), { optimizer: Object.assign({}, zksolc.settings.optimizer) });
    // Remove metadata settings from solidity settings.
    delete compiler.settings.metadata;
    // Override the solc metadata settings with zksolc metadata settings.
    if (zksolc.settings.metadata) {
        compiler.settings.metadata = Object.assign({}, zksolc.settings.metadata);
    }
    // zkSolc supports only a subset of solc output selections
    compiler.settings.outputSelection = filterSupportedOutputSelections(compiler.settings.outputSelection, zksolc.version);
}
exports.updateCompilerConf = updateCompilerConf;
function zeroxlify(hex) {
    hex = hex.toLowerCase();
    return hex.slice(0, 2) === '0x' ? hex : `0x${hex}`;
}
exports.zeroxlify = zeroxlify;
function isURL(url) {
    try {
        const locator = new URL(url);
        return locator.protocol === 'http:' || locator.protocol === 'https:';
    }
    catch (e) {
        return false;
    }
}
exports.isURL = isURL;
function sha1(str) {
    return crypto_1.default.createHash('sha1').update(str).digest('hex');
}
exports.sha1 = sha1;
function saltFromUrl(url) {
    return sha1(url);
}
exports.saltFromUrl = saltFromUrl;
function getZksolcUrl(repo, version, isRelease = true) {
    // @ts-ignore
    const platform = { darwin: 'macosx', linux: 'linux', win32: 'windows' }[process.platform];
    // @ts-ignore
    const toolchain = { linux: '-musl', win32: '-gnu', darwin: '' }[process.platform];
    const arch = process.arch == 'x64' ? 'amd64' : process.arch;
    const ext = process.platform == 'win32' ? '.exe' : '';
    if (isRelease) {
        return `${repo}/releases/download/v${version}/zksolc-${platform}-${arch}${toolchain}-v${version}${ext}`;
    }
    return `${repo}/raw/main/${platform}-${arch}/zksolc-${platform}-${arch}${toolchain}-v${version}${ext}`;
}
exports.getZksolcUrl = getZksolcUrl;
function pluralize(n, singular, plural) {
    if (n === 1) {
        return singular;
    }
    if (plural !== undefined) {
        return plural;
    }
    return `${singular}s`;
}
exports.pluralize = pluralize;
function getVersionComponents(version) {
    const versionComponents = version.split('.');
    return [
        parseInt(versionComponents[0]),
        parseInt(versionComponents[1]),
        parseInt(versionComponents[2])
    ];
}
exports.getVersionComponents = getVersionComponents;
function isVersionInRange(version, versionInfo) {
    const latest = versionInfo.latest;
    const minVersion = versionInfo.minVersion;
    return semver_1.default.gte(version, minVersion) && semver_1.default.lte(version, latest);
}
exports.isVersionInRange = isVersionInRange;
// Generate SolcJS executable code
function generateSolcJSExecutableCode(solcJsPath, workingDir) {
    return constants_1.SOLCJS_EXECUTABLE_CODE
        .replace(/SOLCJS_PATH/g, solcJsPath)
        .replace(/WORKING_DIR/g, workingDir);
}
exports.generateSolcJSExecutableCode = generateSolcJSExecutableCode;
// Find all the libraries that are missing from the contracts
function findMissingLibraries(zkSolcOutput) {
    const missingLibraries = new Set();
    for (let filePath in zkSolcOutput.contracts) {
        for (let contractName in zkSolcOutput.contracts[filePath]) {
            const contract = zkSolcOutput.contracts[filePath][contractName];
            if (contract.missingLibraries && contract.missingLibraries.length > 0) {
                contract.missingLibraries.forEach((library) => {
                    missingLibraries.add(library);
                });
            }
        }
    }
    return missingLibraries;
}
exports.findMissingLibraries = findMissingLibraries;
function mapMissingLibraryDependencies(zkSolcOutput, missingLibraries) {
    const dependencyMap = new Array();
    missingLibraries.forEach(library => {
        const [libFilePath, libContractName] = library.split(":");
        if (zkSolcOutput.contracts[libFilePath] && zkSolcOutput.contracts[libFilePath][libContractName]) {
            const contract = zkSolcOutput.contracts[libFilePath][libContractName];
            if (contract.missingLibraries) {
                dependencyMap.push({
                    contractName: libContractName,
                    contractPath: libFilePath,
                    missingLibraries: contract.missingLibraries
                });
            }
        }
    });
    return dependencyMap;
}
exports.mapMissingLibraryDependencies = mapMissingLibraryDependencies;
// Get or create the libraries file. If the file doesn't exist, create it with an empty array
const getOrCreateLibraries = async (path) => {
    // Ensure the file exists
    if (!(await fs_extra_1.default.pathExists(path))) {
        await fs_extra_1.default.outputFile(path, '[]'); // Initialize with an empty array
    }
    // Return the file's content
    return await fs_extra_1.default.readJSON(path);
};
// Write missing libraries to file and lock the file while writing
const writeLibrariesToFile = async (path, libraries) => {
    try {
        let existingLibraries = await getOrCreateLibraries(path); // Ensure that the file exists
        await proper_lockfile_1.default.lock(path, { retries: { retries: 10, maxTimeout: 1000 } });
        existingLibraries = await getOrCreateLibraries(path); // Read again after locking
        const combinedLibraries = [...existingLibraries, ...libraries];
        fs_extra_1.default.outputFileSync(path, JSON.stringify(combinedLibraries, null, 4));
    }
    catch (e) {
        throw new errors_1.ZkSyncSolcPluginError(`Failed to write missing libraries file: ${e}`);
    }
    finally {
        await proper_lockfile_1.default.unlock(path);
    }
};
exports.writeLibrariesToFile = writeLibrariesToFile;
function resolveTempFileName(filePath) {
    const { dir, ext, name } = path_1.default.parse(filePath);
    return path_1.default.format({
        dir,
        ext,
        name: `${TEMP_FILE_PREFIX}${name}`,
    });
}
async function download(url, filePath, userAgent, version, timeoutMillis = 10000, extraHeaders = {}) {
    const { pipeline } = await Promise.resolve().then(() => __importStar(require("stream")));
    const { getGlobalDispatcher, request } = await Promise.resolve().then(() => __importStar(require("undici")));
    const streamPipeline = util_1.default.promisify(pipeline);
    let dispatcher = getGlobalDispatcher();
    // Fetch the url
    const response = await request(url, {
        dispatcher,
        headersTimeout: timeoutMillis,
        maxRedirections: 10,
        method: "GET",
        headers: Object.assign(Object.assign({}, extraHeaders), { "User-Agent": `${userAgent} ${version}` }),
    });
    if (response.statusCode >= 200 && response.statusCode <= 299) {
        const tmpFilePath = resolveTempFileName(filePath);
        await fs_extra_1.default.ensureDir(path_1.default.dirname(filePath));
        await streamPipeline(response.body, fs_1.default.createWriteStream(tmpFilePath));
        return fs_extra_1.default.move(tmpFilePath, filePath, { overwrite: true });
    }
    // undici's response bodies must always be consumed to prevent leaks
    const text = await response.body.text();
    // eslint-disable-next-line
    throw new Error(`Failed to download ${url} - ${response.statusCode} received. ${text}`);
}
exports.download = download;
//# sourceMappingURL=utils.js.map