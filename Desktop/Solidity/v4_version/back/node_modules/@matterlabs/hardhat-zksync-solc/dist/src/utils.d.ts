import { CompilerOutputSelection, MissingLibrary, ZkSolcConfig } from './types';
import { SolcConfig } from 'hardhat/types';
import { CompilerVersionInfo } from './compile/downloader';
export declare function filterSupportedOutputSelections(outputSelection: CompilerOutputSelection, zkCompilerVersion: string): CompilerOutputSelection;
export declare function updateCompilerConf(compiler: SolcConfig, zksolc: ZkSolcConfig): void;
export declare function zeroxlify(hex: string): string;
export declare function isURL(url: string): boolean;
export declare function sha1(str: string): string;
export declare function saltFromUrl(url: string): string;
export declare function getZksolcUrl(repo: string, version: string, isRelease?: boolean): string;
export declare function pluralize(n: number, singular: string, plural?: string): string;
export declare function getVersionComponents(version: string): number[];
export declare function isVersionInRange(version: string, versionInfo: CompilerVersionInfo): boolean;
export declare function generateSolcJSExecutableCode(solcJsPath: string, workingDir: string): string;
export declare function findMissingLibraries(zkSolcOutput: any): Set<string>;
export declare function mapMissingLibraryDependencies(zkSolcOutput: any, missingLibraries: Set<string>): Array<MissingLibrary>;
export declare const writeLibrariesToFile: (path: string, libraries: any[]) => Promise<void>;
export declare function download(url: string, filePath: string, userAgent: string, version: string, timeoutMillis?: number, extraHeaders?: {
    [name: string]: string;
}): Promise<void>;
//# sourceMappingURL=utils.d.ts.map