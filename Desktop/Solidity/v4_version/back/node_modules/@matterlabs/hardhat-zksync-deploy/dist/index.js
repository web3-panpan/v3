"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("hardhat/config");
const task_names_1 = require("./task-names");
require("./type-extensions");
const task_actions_1 = require("./task-actions");
const argumentTypes_1 = require("hardhat/internal/core/params/argumentTypes");
__exportStar(require("./deployer"), exports);
(0, config_1.extendEnvironment)((hre) => {
    var _a;
    hre.network.zksync = (_a = hre.network.config.zksync) !== null && _a !== void 0 ? _a : false;
});
(0, config_1.task)(task_names_1.TASK_DEPLOY_ZKSYNC, 'Runs the deploy scripts for zkSync network')
    .addParam('script', 'A certain deploy script to be launched', '')
    .setAction(task_actions_1.zkSyncDeploy);
(0, config_1.task)(task_names_1.TASK_DEPLOY_ZKSYNC_LIBRARIES, 'Runs the library deploy for zkSync network')
    .addOptionalParam('privateKey', 'Private key of the account that will deploy the libraries', undefined, argumentTypes_1.string)
    .addOptionalParam('accountNumber', 'Network account index', 0, argumentTypes_1.int)
    .addOptionalParam('externalConfigObjectPath', 'Config file imported in hardhat config file that represent HardhatUserConfig type variable', undefined)
    .addOptionalParam('exportedConfigObject', 'Object in hardhat config file that represent HardhatUserConfig type variable', 'config', argumentTypes_1.string)
    .addFlag('noAutoPopulateConfig', 'Flag to disable auto population of config file')
    .addFlag('compileAllContracts', 'Flag to compile all contracts at the end of the process')
    .setAction(task_actions_1.zkSyncLibraryDeploy);
//# sourceMappingURL=index.js.map